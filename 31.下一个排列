题目：实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。
如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。
必须原地修改，只允许使用额外常数空间。
以下是一些例子，输入位于左侧列，其相应输出位于右侧列。
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1
1,3,2 ->2,1,3
题目解析：序列如果不是降序，则输出该序列下一个更大的序列；否则输出升序。
代码：
void nextPermutation(vector<int>& nums) {
        bool sig=false;
        for(int i=nums.size()-1;i>0;i--){
            if(nums[i]>nums[i-1]){
                int j=nums.size()-1;
                while(nums[j]<=nums[i-1]){
                    j--;
                }
                swap(nums[j],nums[i-1]);
                reverse(nums.begin()+i,nums.end());
                sig=true;
                i=0;
            }
        }
        if(!sig){
            reverse(nums.begin(),nums.end());
        }
    }
