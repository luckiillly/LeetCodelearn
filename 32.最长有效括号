题目描述：给定一个只包含 '(' 和 ')' 的字符串，找出最长的包含有效括号的子串的长度。 (超难度题目)
代码思路：暴力、动态规划、栈
动态规划：
......()
dp[i]=dp[i−2]+2
......))
dp[i]=dp[i−1]+dp[i−dp[i−1]−2]+2
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
int longestValidParentheses(string s) {
        vector<int> dp(s.size());
        int result=0;
        for(int i=1;i<s.size();i++){
            if(s[i]==')'){
                if(s[i-1]=='('){
                    dp[i]=(i>=2?dp[i-2]:0)+2;
                }
                else if((i-dp[i-1])>0&&s[i-dp[i-1]-1]=='('){
                    dp[i]=(i-dp[i-1]>=2?dp[i-2-dp[i-1]]:0)+dp[i-1]+2;
                }
                result=max(dp[i],result);
            }
        }
        return result;
    }
栈：
int longestValidParentheses(string s) {
        int result=0;
        stack<int> temp;
        temp.push(-1);
        for(int i=0;i<s.size();i++){
            if(s[i]=='('){
                temp.push(i);
            }
            else{
                temp.pop();
                if(temp.empty()){
                    temp.push(i);
                }
                else{
                    result=max(result,i-temp.top());
                }
            }
        }
        return result;
    }
