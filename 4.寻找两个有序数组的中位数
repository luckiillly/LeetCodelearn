题目描述：给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。
请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。
你可以假设 nums1 和 nums2 不会同时为空。
代码思路：归并算法修改，找到（length+1）/2 和(length+1)/2 +1位置数根据奇偶输出。
double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int length=nums1.size()+nums2.size();
        int mid=(length+1)/2;
        int num=0,a=0,b=0;
        double result[2]={0};
        bool signal=false;
        while(a<nums1.size()&&b<nums2.size()&&!signal){
            if(nums1[a]<=nums2[b]){
                num++;
                if(num==mid){
                    result[0]=nums1[a];
                }
                if(num==mid+1){
                    result[1]=nums1[a];
                    signal=true;
                }
                a++;
            }
            else{                
                num++;
                if(num==mid){
                    result[0]=nums2[b];
                }
                if(num==mid+1){
                    result[1]=nums2[b];
                    signal=true;
                }
                b++;
            }
        }
        while(a<nums1.size()&&!signal){
            num++;
            if(num==mid){
                result[0]=nums1[a];
            }
            if(num==mid+1){
                result[1]=nums1[a];
                signal=true;
            }
            a++;
        }
        while(b<nums2.size()&&!signal){
            num++;
            if(num==mid){
                result[0]=nums2[b];
            }
            if(num==mid+1){
                result[1]=nums2[b];
                signal=true;
            }
            b++;
        }
        double resultt=length%2==0?((result[0]+result[1])/2):result[0];
        return resultt;
    }
官方递归解答：
