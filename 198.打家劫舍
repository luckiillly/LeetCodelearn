题目描述：你是一个专业的小偷，计划偷窃沿街的房屋。
每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。
代码思路：动态规划 dp[i]=max(dp[i-1],dp[i-2]+nums[i])
 int rob(vector<int>& nums) {
        if(nums.size()==0)
            return 0;
        if(nums.size()==1)
            return nums[0];
        vector<int> dp(nums.size());
        dp[0]=nums[0];
        dp[1]=max(nums[1],nums[0]);
        for(int i=2;i<nums.size();i++){
            dp[i]=max(dp[i-1],dp[i-2]+nums[i]);
        }
        return dp[nums.size()-1];
    }
    
 优化：动态规划中只用记录i-1 和i-2对应的值，不断更新
 int rob(vector<int>& nums) {
        int maxpre=0,maxcur=0;
        for(int i=0;i<nums.size();i++){
            int temp=maxcur;
            maxcur=max(maxcur,maxpre+nums[i]);
            maxpre=temp;
        }
        return maxcur;
    }
