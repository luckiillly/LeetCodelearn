题目描述：
给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储一位数字。
如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。
您可以假设除了数字 0 之外，这两个数都不会以 0 开头。
代码思路：本题难点在于链表，结果存为链表（新建链表保存数据，利用原来的l1,l2）,记录和与进位，注意边界。
这里ListNode 是类可以通过 ListNode * l=new ListNode(0);声明空间，也可以ListNode * l=(ListNode *)malloc(sizeof(ListNode))(测试不通过)
作用符.和->
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode * result=new ListNode(0);
        ListNode * cur =result;
        int add=0,sum=0;
        while(l1!=nullptr||l2!=nullptr){
            sum=0;
            if(l1){
                sum+=l1->val;
                l1=l1->next;
            }
            if(l2){
                sum+=l2->val;
                l2=l2->next;
            }
            sum+=add;
            cur->next=new ListNode(sum % 10);
            add=sum / 10;
            cur=cur->next;
        }
        if(add!=0){
            cur->next=new ListNode(add);            
        }
        return result->next;
    }
};
